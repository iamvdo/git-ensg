{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Git ENSG Git est un VCS (Version Control System) ou logiciel de gestion de versions qui est notamment pens\u00e9 pour le travail collaboratif. Il offre la possibilit\u00e9 : de stocker des fichiers ailleurs que sur votre ordinateur ou une cl\u00e9 USB de travailler sur diff\u00e9rents fichiers en m\u00eame temps que d\u2019autres personnes de garder un historique de toutes les modifications faites de partager des fichiers de mani\u00e8re publique ou priv\u00e9e et bien plus encore Git est un logiciel libre et open-source, qui ne repose pas sur un serveur centralis\u00e9 . Chaque personne d\u2019un projet a donc sa propre copie du projet en local et peut \u00eatre la r\u00e9f\u00e9rence pour les autres. Malgr\u00e9 tout, il est tr\u00e8s fr\u00e9quent d\u2019utiliser un serveur interm\u00e9diaire comme Gitlab ou Github, qui sont des services d\u2019h\u00e9bergement de fichiers, et qui rendent le partage plus simple. Git est notamment utilis\u00e9 pour le code informatique, mais ce sont avant tout des fichiers textes. Installation Git est disponible facilement sur toutes les plateformes. T\u00e9l\u00e9charger Git Il peut \u00eatre utilis\u00e9 en ligne de commande depuis un terminal, ou via des outils graphiques comme les \u00e9diteurs de texte tel Visual Studio Code . Il existe \u00e9galement l\u2019utilitaire gitk . Pour v\u00e9rifier la bonne installation : git --version (Cr\u00e9ation d\u2019un compte GitHub) Si vous n\u2019avez pas encore de compte, c\u2019est par ici : Cr\u00e9ation de compte GitHub Ensuite, il faut configurer un Personnal token classic , une sorte de mot de passe s\u00e9curis\u00e9. C\u2019est notamment utile pour ex\u00e9cuter des commandes Git qui utiliseront le protocole HTTPS. Conservez ce token dans un fichier texte temporairement (vous n\u2019y aurez plus acc\u00e8s ensuite). Sur vos machines personnelles, il est pr\u00e9f\u00e9rable d\u2019utiliser des URLs et une cl\u00e9 SSH . Configuration Premi\u00e8re chose \u00e0 faire dans un projet Git, c\u2019est de configurer qui vous \u00eates : git config user.email \"votre_adresse_mail\" git config user.name \"votre_nom\" Note: un flag --global permet de d\u00e9finir ce r\u00e9glage de mani\u00e8re globale, pour tous les projets Git de votre machine. A ne pas utiliser dans le cas de machines partag\u00e9es. Depuis l\u2019ENSG, il est \u00e9galement n\u00e9cessaire de configurer le proxy (d\u00e9j\u00e0 configur\u00e9 en salle de cours) : git config --global http.proxy http://10.0.4.2:3128 git config --global https.proxy http://10.0.4.2:3128 Pour un meilleur log, il peut aussi \u00eatre int\u00e9ressant d\u2019ajouter un alias (utilisable plus tard avec git lg --all ) : git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\" Pour voir la config : git config --list et git config --list --global Commencer/R\u00e9cup\u00e9rer un projet Git Pour initialiser un nouveau projet Git, la commande est git init . Cependant, il est souvent plus fr\u00e9quent de cr\u00e9er son projet sur une plateforme en ligne (GitHub, GitLab), puis de r\u00e9cup\u00e9rer son projet en local (ce que l\u2019on appelle cloner). TP 1 A faire une seule fois : cr\u00e9ez un repo sur GitHub ou GitLab, avec un README \u00e9ditez le README en ligne invitez les collaborateurs A faire ensuite sur chaque machine : clonez le repo ( git clone <url-repo-distant> ) Tout le monde a normalement r\u00e9cup\u00e9r\u00e9 le projet ! Quand on souhaite cloner un projet qui ne nous appartient pas, il est pr\u00e9f\u00e9rable d\u2019en cr\u00e9er une copie (ce que l\u2019on appelle un fork ) on \u00abforke\u00bb un projet existant dans son espace GitHub/GitLab on clone son fork sur son ordinateur avec git clone <url> on v\u00e9rifie le bon ajout du d\u00e9pot distant avec git remote -v TP 2 A faire une seule fois : faites un fork du projet commun : GitHub https://github.com/iamvdo/git-ensg GitLab https://gitlab.com/iamvdo/git-ensg invitez les collaborateurs Sur chaque machine : clonez ce repo ouvrez l\u2019int\u00e9gralit\u00e9 du projet dans un \u00e9diteur de texte (remarquez le dossier cach\u00e9 .git ) Ce site utilise mkdocs pour fonctionner, nous allons donc en avoir besoin en local : installez mkdocs avec pip install mkdocs dans le dossier du projet, lancez la commande mkdocs serve dans un navigateur, allez \u00e0 l\u2019URL http://locahost:8000 Fonctionnement de Git Voil\u00e0 un diagramme qui explique le fonctionnement g\u00e9n\u00e9ral de Git. En voici le principe : Local Repo : repository local, c\u2019est \u00e0 dire le dossier local Remote Repo : c\u2019est le repository distant, par exemple sur GitHub Lorsque que l\u2019on modifie/ajoute/supprime des fichiers en local, on modifie alors le working tree . Ensuite, pour enregistrer un ensemble de modifications, il nous faut choisir les fichiers (voir parties de fichiers) \u00e0 ajouter ou non. Pour cela, nous utilisons les commandes git add / git rm . Cela ajoute/supprime les fichiers \u00e0 l\u2019 index ou staging area . L\u2019index est donc une sorte de zone d\u2019attente qui permet de pr\u00e9parer l\u2019enregistrement de ses modifications. Enfin, pour valider cet ensemble de modifications pr\u00e9sent dans l\u2019 index , il nous faut alors faire git commit . Cela se r\u00e9alise au sein d\u2019une branche locale ( main ou master par d\u00e9faut). Apr\u00e8s un commit, l\u2019index en cours est vid\u00e9. Ces actions peuvent \u00eatre r\u00e9p\u00e9t\u00e9es autant de fois que n\u00e9cessaire, et cela sans se soucier de savoir o\u00f9 en est l\u2019avancement du projet distant. Lorsque l\u2019on souhaite envoyer ses modifications locales sur le repository distant, on utilise git push . Mais attention, si d\u2019autres personnes ont d\u00e9j\u00e0 fait des modifications, il se peut que cela g\u00e9n\u00e8re des conflits . Il est donc pr\u00e9f\u00e9rable de r\u00e9cup\u00e9rer le code distant avant toutes nouvelles modifications \u00e0 l\u2019aide de git fetch ou git pull . Aussi, la plupart du temps, il n\u2019est pas autoris\u00e9 de mettre \u00e0 jour directement la branche principale d\u2019un projet. Il faut alors passer par des pull requests . Les commandes Quelques commandes utiles pour la prise d\u2019informations : git status affiche le statut, l\u2019\u00e9tat des diff\u00e9rentes zones (working tree, index, branche, conflits, etc.) git branch liste les branches locales (l\u2019\u00e9toile * affiche la branche de travail) git remote -v affiche le nom et l\u2019url des repository distants git lg --all (commande personnalis\u00e9e) affiche un arbre des commits et des branches Ajouter/Supprimer dans l\u2019index Voici quelques exemples de git add (identique pour git rm ) # Ajouter le fichier test.txt git add test.txt # Ajouter le dossier /images git add /images # Ajouter tout ce qui est modifi\u00e9 (. est le nom du dossier courant) git add . # Ajouter des portions de fichiers git add -p test.txt Cr\u00e9er un commit Pour enregistrer un \u00e9tat d\u2019historique, on utilise git commit . Chaque commit doit concerner un ajout particulier, une fonctionnalit\u00e9 particuli\u00e8re, que l\u2019on pr\u00e9cise par un message. Il est donc recommand\u00e9 de r\u00e9aliser de multiples petits commits, plut\u00f4t qu\u2019un seul important. # Ouvre un \u00e9diteur pour \u00e9crire le message du commit git commit # Cre\u00e9 un commit en pr\u00e9cisant directement le message (pr\u00e9f\u00e9rable) git commit -m \"Message du commit\" Rappel : les commits se font dans la branche courante. Il est maintenant possible de se d\u00e9placer dans l\u2019historique avec git checkout <id_commit> . Pousser les modifications Pour envoyer vos modifications, c\u2019est git pull en pr\u00e9cisant le nom du repository et de votre branche : # poussez sur le repo origin, sur la branche main (\u00e0 v\u00e9rifier) git push origin main Mettre \u00e0 jour son repo local Pour r\u00e9cup\u00e9rer des modifications distantes (faites par d\u2019autres personnes), il faut utiliser git pull ou git fetch : git pull <nom_repo> <nom_branche> r\u00e9cup\u00e8re la branche distante et tente une fusion avec la branche locale. git fetch <nom_repo> <nom_branche> ne fait que r\u00e9cup\u00e8rer la branche distante. Il faut donc ensuite choisir comment fusionner le code, par exemple avec git merge ou git reset . # R\u00e9cup\u00e8re la branche main du repo origin et fusionne avec la branche en local git pull origin main # Identique \u00e0 l\u2019exemple pr\u00e9c\u00e9dent git fetch origin main git merge origin/main # R\u00e9cup\u00e8re la branche distante main, mais \u00e9crase la branche locale git fetch origin main git reset --hard origin/main TP 1 A faire sur une seule machine, en local : modifiez le README en ajoutant une description du projet ajoutez le README \u00e0 l\u2019index ( git add README.md ) faites un commit en local ( git commit -m 'Ajout description' ) (testez de revenir \u00e0 l\u2019\u00e9tat pr\u00e9c\u00e9dent, puis \u00e0 l\u2019\u00e9tat actuel avec git checkout <id-commit> ) poussez sur le serveur distant v\u00e9rifiez la bonne mise \u00e0 jour Sur les machines qui n'ont pas encore les modifications : r\u00e9cup\u00e9rez-les avec git pull visualisez l\u2019arbre des commits avec git lg --all TP 2 A faire sur chaque machine, en local : dans le dossier /docs , cr\u00e9ez un nouveau fichier <nom_prenom>.md ajoutez votre nom/prenom en titre et votre date de naissance en texte (acc\u00e8s \u00e0 la documentation Markdown ) visualisez le r\u00e9sultat \u00e0 l\u2019URL http://localhost:8000/<nom_prenom> enregistrez vos modifications dans Git ( git add , git commit ) ajoutez une image depuis internet enregistrez vos modifications dans Git ( git add , git commit ) poussez sur votre repo distant r\u00e9cup\u00e9rez les modifications avec git pull Fusionner les modifications Souvent, en mode collaboratif, ou quand le projet ne nous appartient pas, seules quelques personnes ont le droit de mettre \u00e0 jour la branche principale. Pour demander l\u2019int\u00e9gration de nos modifications, nous allons donc passer par une pull request (GitHub) ou merge request (GitLab) . Cela se passe directement en ligne. On parle alors de fusion ou de merge . Documentation Pull Request GitHub . Note : Une fusion cr\u00e9e un nouveau commit. Pour \u00e9viter cela, on peut alors passer par un rebase . TP 2 cr\u00e9ez une pull request sur le repo officiel (s\u00e9lectionnez les bons projets/branches) attendez que toutes les pull requests soit fusionn\u00e9es r\u00e9cup\u00e9rez les modifications de tous les participants avec git pull visualisez l\u2019arbre des commits avec git lg --all TP 2 A faire sur chaque machine, en local : ajoutez un lien vers votre page dans mkdocs.yml (cl\u00e9 nav ), \u00e0 la suite du lien vers la page d\u2019accueil poussez sur votre repo et r\u00e9cup\u00e9rez les autres modifications Conflits Lorsqu\u2019une fusion est tent\u00e9e, mais que deux personnes ont modifi\u00e9 une ou plusieurs lignes d\u2019un m\u00eame fichier, Git cr\u00e9e un conflit. Cela est symbolis\u00e9 dans le fichier par un formalisme particulier, qui indique les 2 \u00e9tats du fichier \u00e0 la suite : # d\u00e9but du conflit <<<<<<< HEAD # premier \u00e9tat du fichier ======= # second \u00e9tat >>>>>>> nom_branche # fin du conflit Il faut donc faire un choix pour conserver seulement la partie 1 ( HEAD est la position actuelle), la partie 2 (la nouvelle branche), ou les deux. Puis, supprimer le formalisme ( <<<<<<< , ======= et >>>>>>> ). Et enfin, continuez la fusion en cours ( merge , rebase ou autre). Branches Les branches Git permettent notamment de travailler sur plusieurs t\u00e2ches en simultan\u00e9 . C\u2019est aussi utile, tout simplement, parce que le projet distant peut \u00e9voluer durant notre propre travail local, ou pour simplifier la gestion des conflits. Pour cr\u00e9er de nouvelles branches, on utilise git branch <nom_branche> . Pour se d\u00e9placer sur une branche, c\u2019est git checkout ou git switch (pr\u00e9f\u00e9rable). # Cree une nouvelle branche git branch nom_branche # Se d\u00e9place sur une branche git switch nom_branche # Cr\u00e9e une branche et se d\u00e9place en m\u00eame temps git switch -c nom_branche # Supprime une branche git branch -d nom_branche Source atlassian.com Lorsqu\u2019une branche est cr\u00e9\u00e9e, son point de d\u00e9part est l\u2019emplacement actuel du HEAD (commit, branche, etc.). Il est possible de d\u00e9placer l\u2019int\u00e9gralit\u00e9 d\u2019une branche, c\u2019est ce que l\u2019on appelle un rebase . Cela revient \u00e0 d\u00e9crocher la branche de l\u2019emplacement initial, pour la raccrocher \u00e0 un autre emplacement. Source atlassian.com TP 2 Notre probl\u00e8me actuel : nous avons modifi\u00e9 notre projet local (ajout des liens), mais le repo distant a \u00e9t\u00e9 modifi\u00e9 \u00e9galement. Nous n\u2019avions pas de branche sp\u00e9cifique. Les 2 branches main ont donc diverg\u00e9es. Il nous faudrait donc \u00e9craser la branche main , mais nous risquons de perdre notre travail. Pour r\u00e9soudre ce \u00abprobl\u00e8me\u00bb, en local : cr\u00e9ez une branche l\u00e0 o\u00f9 vous \u00eates, mais en restant sur la branche main ( git branch <nom_branche> ) r\u00e9cup\u00e9rez la branche main distante ( git fetch origin ) et r\u00e9initialisez la branche main locale par rapport \u00e0 cette branche ( git reset --hard origin/main ) d\u00e9placez-vous sur votre branche ( git switch <nom_branche> ) rebasez sur la branche main ( git rebase main ) Ensuite, cela d\u00e9pend de ce que vous souhaitez faire : v\u00e9rifiez votre travail avec git lg --all poussez vos modifications cr\u00e9ez une pull request supprimez vos branches inutiles Aller plus loin Exemple d\u2019int\u00e9gration de Git dans Visual Studio Code Concepts Git sous forme de jeu Visualizing Git Concepts with D3","title":"Git ENSG"},{"location":"#git-ensg","text":"Git est un VCS (Version Control System) ou logiciel de gestion de versions qui est notamment pens\u00e9 pour le travail collaboratif. Il offre la possibilit\u00e9 : de stocker des fichiers ailleurs que sur votre ordinateur ou une cl\u00e9 USB de travailler sur diff\u00e9rents fichiers en m\u00eame temps que d\u2019autres personnes de garder un historique de toutes les modifications faites de partager des fichiers de mani\u00e8re publique ou priv\u00e9e et bien plus encore Git est un logiciel libre et open-source, qui ne repose pas sur un serveur centralis\u00e9 . Chaque personne d\u2019un projet a donc sa propre copie du projet en local et peut \u00eatre la r\u00e9f\u00e9rence pour les autres. Malgr\u00e9 tout, il est tr\u00e8s fr\u00e9quent d\u2019utiliser un serveur interm\u00e9diaire comme Gitlab ou Github, qui sont des services d\u2019h\u00e9bergement de fichiers, et qui rendent le partage plus simple. Git est notamment utilis\u00e9 pour le code informatique, mais ce sont avant tout des fichiers textes.","title":"Git ENSG"},{"location":"#installation","text":"Git est disponible facilement sur toutes les plateformes. T\u00e9l\u00e9charger Git Il peut \u00eatre utilis\u00e9 en ligne de commande depuis un terminal, ou via des outils graphiques comme les \u00e9diteurs de texte tel Visual Studio Code . Il existe \u00e9galement l\u2019utilitaire gitk . Pour v\u00e9rifier la bonne installation : git --version","title":"Installation"},{"location":"#creation-dun-compte-github","text":"Si vous n\u2019avez pas encore de compte, c\u2019est par ici : Cr\u00e9ation de compte GitHub Ensuite, il faut configurer un Personnal token classic , une sorte de mot de passe s\u00e9curis\u00e9. C\u2019est notamment utile pour ex\u00e9cuter des commandes Git qui utiliseront le protocole HTTPS. Conservez ce token dans un fichier texte temporairement (vous n\u2019y aurez plus acc\u00e8s ensuite). Sur vos machines personnelles, il est pr\u00e9f\u00e9rable d\u2019utiliser des URLs et une cl\u00e9 SSH .","title":"(Cr\u00e9ation d\u2019un compte GitHub)"},{"location":"#configuration","text":"Premi\u00e8re chose \u00e0 faire dans un projet Git, c\u2019est de configurer qui vous \u00eates : git config user.email \"votre_adresse_mail\" git config user.name \"votre_nom\" Note: un flag --global permet de d\u00e9finir ce r\u00e9glage de mani\u00e8re globale, pour tous les projets Git de votre machine. A ne pas utiliser dans le cas de machines partag\u00e9es. Depuis l\u2019ENSG, il est \u00e9galement n\u00e9cessaire de configurer le proxy (d\u00e9j\u00e0 configur\u00e9 en salle de cours) : git config --global http.proxy http://10.0.4.2:3128 git config --global https.proxy http://10.0.4.2:3128 Pour un meilleur log, il peut aussi \u00eatre int\u00e9ressant d\u2019ajouter un alias (utilisable plus tard avec git lg --all ) : git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\" Pour voir la config : git config --list et git config --list --global","title":"Configuration"},{"location":"#commencerrecuperer-un-projet-git","text":"Pour initialiser un nouveau projet Git, la commande est git init . Cependant, il est souvent plus fr\u00e9quent de cr\u00e9er son projet sur une plateforme en ligne (GitHub, GitLab), puis de r\u00e9cup\u00e9rer son projet en local (ce que l\u2019on appelle cloner). TP 1 A faire une seule fois : cr\u00e9ez un repo sur GitHub ou GitLab, avec un README \u00e9ditez le README en ligne invitez les collaborateurs A faire ensuite sur chaque machine : clonez le repo ( git clone <url-repo-distant> ) Tout le monde a normalement r\u00e9cup\u00e9r\u00e9 le projet ! Quand on souhaite cloner un projet qui ne nous appartient pas, il est pr\u00e9f\u00e9rable d\u2019en cr\u00e9er une copie (ce que l\u2019on appelle un fork ) on \u00abforke\u00bb un projet existant dans son espace GitHub/GitLab on clone son fork sur son ordinateur avec git clone <url> on v\u00e9rifie le bon ajout du d\u00e9pot distant avec git remote -v TP 2 A faire une seule fois : faites un fork du projet commun : GitHub https://github.com/iamvdo/git-ensg GitLab https://gitlab.com/iamvdo/git-ensg invitez les collaborateurs Sur chaque machine : clonez ce repo ouvrez l\u2019int\u00e9gralit\u00e9 du projet dans un \u00e9diteur de texte (remarquez le dossier cach\u00e9 .git ) Ce site utilise mkdocs pour fonctionner, nous allons donc en avoir besoin en local : installez mkdocs avec pip install mkdocs dans le dossier du projet, lancez la commande mkdocs serve dans un navigateur, allez \u00e0 l\u2019URL http://locahost:8000","title":"Commencer/R\u00e9cup\u00e9rer un projet Git"},{"location":"#fonctionnement-de-git","text":"Voil\u00e0 un diagramme qui explique le fonctionnement g\u00e9n\u00e9ral de Git. En voici le principe : Local Repo : repository local, c\u2019est \u00e0 dire le dossier local Remote Repo : c\u2019est le repository distant, par exemple sur GitHub Lorsque que l\u2019on modifie/ajoute/supprime des fichiers en local, on modifie alors le working tree . Ensuite, pour enregistrer un ensemble de modifications, il nous faut choisir les fichiers (voir parties de fichiers) \u00e0 ajouter ou non. Pour cela, nous utilisons les commandes git add / git rm . Cela ajoute/supprime les fichiers \u00e0 l\u2019 index ou staging area . L\u2019index est donc une sorte de zone d\u2019attente qui permet de pr\u00e9parer l\u2019enregistrement de ses modifications. Enfin, pour valider cet ensemble de modifications pr\u00e9sent dans l\u2019 index , il nous faut alors faire git commit . Cela se r\u00e9alise au sein d\u2019une branche locale ( main ou master par d\u00e9faut). Apr\u00e8s un commit, l\u2019index en cours est vid\u00e9. Ces actions peuvent \u00eatre r\u00e9p\u00e9t\u00e9es autant de fois que n\u00e9cessaire, et cela sans se soucier de savoir o\u00f9 en est l\u2019avancement du projet distant. Lorsque l\u2019on souhaite envoyer ses modifications locales sur le repository distant, on utilise git push . Mais attention, si d\u2019autres personnes ont d\u00e9j\u00e0 fait des modifications, il se peut que cela g\u00e9n\u00e8re des conflits . Il est donc pr\u00e9f\u00e9rable de r\u00e9cup\u00e9rer le code distant avant toutes nouvelles modifications \u00e0 l\u2019aide de git fetch ou git pull . Aussi, la plupart du temps, il n\u2019est pas autoris\u00e9 de mettre \u00e0 jour directement la branche principale d\u2019un projet. Il faut alors passer par des pull requests .","title":"Fonctionnement de Git"},{"location":"#les-commandes","text":"Quelques commandes utiles pour la prise d\u2019informations : git status affiche le statut, l\u2019\u00e9tat des diff\u00e9rentes zones (working tree, index, branche, conflits, etc.) git branch liste les branches locales (l\u2019\u00e9toile * affiche la branche de travail) git remote -v affiche le nom et l\u2019url des repository distants git lg --all (commande personnalis\u00e9e) affiche un arbre des commits et des branches","title":"Les commandes"},{"location":"#ajoutersupprimer-dans-lindex","text":"Voici quelques exemples de git add (identique pour git rm ) # Ajouter le fichier test.txt git add test.txt # Ajouter le dossier /images git add /images # Ajouter tout ce qui est modifi\u00e9 (. est le nom du dossier courant) git add . # Ajouter des portions de fichiers git add -p test.txt","title":"Ajouter/Supprimer dans l\u2019index"},{"location":"#creer-un-commit","text":"Pour enregistrer un \u00e9tat d\u2019historique, on utilise git commit . Chaque commit doit concerner un ajout particulier, une fonctionnalit\u00e9 particuli\u00e8re, que l\u2019on pr\u00e9cise par un message. Il est donc recommand\u00e9 de r\u00e9aliser de multiples petits commits, plut\u00f4t qu\u2019un seul important. # Ouvre un \u00e9diteur pour \u00e9crire le message du commit git commit # Cre\u00e9 un commit en pr\u00e9cisant directement le message (pr\u00e9f\u00e9rable) git commit -m \"Message du commit\" Rappel : les commits se font dans la branche courante. Il est maintenant possible de se d\u00e9placer dans l\u2019historique avec git checkout <id_commit> .","title":"Cr\u00e9er un commit"},{"location":"#pousser-les-modifications","text":"Pour envoyer vos modifications, c\u2019est git pull en pr\u00e9cisant le nom du repository et de votre branche : # poussez sur le repo origin, sur la branche main (\u00e0 v\u00e9rifier) git push origin main","title":"Pousser les modifications"},{"location":"#mettre-a-jour-son-repo-local","text":"Pour r\u00e9cup\u00e9rer des modifications distantes (faites par d\u2019autres personnes), il faut utiliser git pull ou git fetch : git pull <nom_repo> <nom_branche> r\u00e9cup\u00e8re la branche distante et tente une fusion avec la branche locale. git fetch <nom_repo> <nom_branche> ne fait que r\u00e9cup\u00e8rer la branche distante. Il faut donc ensuite choisir comment fusionner le code, par exemple avec git merge ou git reset . # R\u00e9cup\u00e8re la branche main du repo origin et fusionne avec la branche en local git pull origin main # Identique \u00e0 l\u2019exemple pr\u00e9c\u00e9dent git fetch origin main git merge origin/main # R\u00e9cup\u00e8re la branche distante main, mais \u00e9crase la branche locale git fetch origin main git reset --hard origin/main TP 1 A faire sur une seule machine, en local : modifiez le README en ajoutant une description du projet ajoutez le README \u00e0 l\u2019index ( git add README.md ) faites un commit en local ( git commit -m 'Ajout description' ) (testez de revenir \u00e0 l\u2019\u00e9tat pr\u00e9c\u00e9dent, puis \u00e0 l\u2019\u00e9tat actuel avec git checkout <id-commit> ) poussez sur le serveur distant v\u00e9rifiez la bonne mise \u00e0 jour Sur les machines qui n'ont pas encore les modifications : r\u00e9cup\u00e9rez-les avec git pull visualisez l\u2019arbre des commits avec git lg --all TP 2 A faire sur chaque machine, en local : dans le dossier /docs , cr\u00e9ez un nouveau fichier <nom_prenom>.md ajoutez votre nom/prenom en titre et votre date de naissance en texte (acc\u00e8s \u00e0 la documentation Markdown ) visualisez le r\u00e9sultat \u00e0 l\u2019URL http://localhost:8000/<nom_prenom> enregistrez vos modifications dans Git ( git add , git commit ) ajoutez une image depuis internet enregistrez vos modifications dans Git ( git add , git commit ) poussez sur votre repo distant r\u00e9cup\u00e9rez les modifications avec git pull","title":"Mettre \u00e0 jour son repo local"},{"location":"#fusionner-les-modifications","text":"Souvent, en mode collaboratif, ou quand le projet ne nous appartient pas, seules quelques personnes ont le droit de mettre \u00e0 jour la branche principale. Pour demander l\u2019int\u00e9gration de nos modifications, nous allons donc passer par une pull request (GitHub) ou merge request (GitLab) . Cela se passe directement en ligne. On parle alors de fusion ou de merge . Documentation Pull Request GitHub . Note : Une fusion cr\u00e9e un nouveau commit. Pour \u00e9viter cela, on peut alors passer par un rebase . TP 2 cr\u00e9ez une pull request sur le repo officiel (s\u00e9lectionnez les bons projets/branches) attendez que toutes les pull requests soit fusionn\u00e9es r\u00e9cup\u00e9rez les modifications de tous les participants avec git pull visualisez l\u2019arbre des commits avec git lg --all TP 2 A faire sur chaque machine, en local : ajoutez un lien vers votre page dans mkdocs.yml (cl\u00e9 nav ), \u00e0 la suite du lien vers la page d\u2019accueil poussez sur votre repo et r\u00e9cup\u00e9rez les autres modifications","title":"Fusionner les modifications"},{"location":"#conflits","text":"Lorsqu\u2019une fusion est tent\u00e9e, mais que deux personnes ont modifi\u00e9 une ou plusieurs lignes d\u2019un m\u00eame fichier, Git cr\u00e9e un conflit. Cela est symbolis\u00e9 dans le fichier par un formalisme particulier, qui indique les 2 \u00e9tats du fichier \u00e0 la suite : # d\u00e9but du conflit <<<<<<< HEAD # premier \u00e9tat du fichier ======= # second \u00e9tat >>>>>>> nom_branche # fin du conflit Il faut donc faire un choix pour conserver seulement la partie 1 ( HEAD est la position actuelle), la partie 2 (la nouvelle branche), ou les deux. Puis, supprimer le formalisme ( <<<<<<< , ======= et >>>>>>> ). Et enfin, continuez la fusion en cours ( merge , rebase ou autre).","title":"Conflits"},{"location":"#branches","text":"Les branches Git permettent notamment de travailler sur plusieurs t\u00e2ches en simultan\u00e9 . C\u2019est aussi utile, tout simplement, parce que le projet distant peut \u00e9voluer durant notre propre travail local, ou pour simplifier la gestion des conflits. Pour cr\u00e9er de nouvelles branches, on utilise git branch <nom_branche> . Pour se d\u00e9placer sur une branche, c\u2019est git checkout ou git switch (pr\u00e9f\u00e9rable). # Cree une nouvelle branche git branch nom_branche # Se d\u00e9place sur une branche git switch nom_branche # Cr\u00e9e une branche et se d\u00e9place en m\u00eame temps git switch -c nom_branche # Supprime une branche git branch -d nom_branche Source atlassian.com Lorsqu\u2019une branche est cr\u00e9\u00e9e, son point de d\u00e9part est l\u2019emplacement actuel du HEAD (commit, branche, etc.). Il est possible de d\u00e9placer l\u2019int\u00e9gralit\u00e9 d\u2019une branche, c\u2019est ce que l\u2019on appelle un rebase . Cela revient \u00e0 d\u00e9crocher la branche de l\u2019emplacement initial, pour la raccrocher \u00e0 un autre emplacement. Source atlassian.com TP 2 Notre probl\u00e8me actuel : nous avons modifi\u00e9 notre projet local (ajout des liens), mais le repo distant a \u00e9t\u00e9 modifi\u00e9 \u00e9galement. Nous n\u2019avions pas de branche sp\u00e9cifique. Les 2 branches main ont donc diverg\u00e9es. Il nous faudrait donc \u00e9craser la branche main , mais nous risquons de perdre notre travail. Pour r\u00e9soudre ce \u00abprobl\u00e8me\u00bb, en local : cr\u00e9ez une branche l\u00e0 o\u00f9 vous \u00eates, mais en restant sur la branche main ( git branch <nom_branche> ) r\u00e9cup\u00e9rez la branche main distante ( git fetch origin ) et r\u00e9initialisez la branche main locale par rapport \u00e0 cette branche ( git reset --hard origin/main ) d\u00e9placez-vous sur votre branche ( git switch <nom_branche> ) rebasez sur la branche main ( git rebase main ) Ensuite, cela d\u00e9pend de ce que vous souhaitez faire : v\u00e9rifiez votre travail avec git lg --all poussez vos modifications cr\u00e9ez une pull request supprimez vos branches inutiles","title":"Branches"},{"location":"#aller-plus-loin","text":"Exemple d\u2019int\u00e9gration de Git dans Visual Studio Code Concepts Git sous forme de jeu Visualizing Git Concepts with D3","title":"Aller plus loin"}]}